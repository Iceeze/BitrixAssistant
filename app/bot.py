import logging
import httpx
import json

from datetime import datetime
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import *
from db import *
from utils import *

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
async def process_task_event(event: str, data: dict, user_data: dict, chat_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞"""
    try:
        task_id = None
        #logging.info(f"data: {data}")  # –õ–æ–≥–∏

        if event != "ontaskdelete":
            task_id = data.get('data', {}).get('FIELDS_AFTER', {}).get('ID')
            if not task_id and event:
                logging.error("No task ID in webhook data")
                return

            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{user_data['domain']}/rest/tasks.task.get",
                    params={
                        "taskId": task_id,
                        "auth": user_data["access_token"]
                    }
                )
                resp.raise_for_status()
                task_data = resp.json()

                if 'error' in task_data:
                    logging.error(f"Bitrix API error: {task_data['error_description']}")
                    return

                task = task_data.get('result', {}).get('task', {})

                #logging.info(f"Task data: {task}")  # –õ–æ–≥–∏

        message = ""
        responsible_id = None

        status_map = {
            '2': "üÜï –ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            '3': "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            '4': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
            '5': "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            '6': "‚è∏ –û—Ç–ª–æ–∂–µ–Ω–∞"
        }

        priority_map = {
            '0': "–ù–∏–∑–∫–∏–π",
            '1': "–°—Ä–µ–¥–Ω–∏–π",
            '2': "–í—ã—Å–æ–∫–∏–π"
        }

        title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = task.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        priority_code = task.get('priority')
        priority = priority_map.get(priority_code)
        status_code = task.get('status')
        status = status_map.get(status_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({status_code})")
        responsible_id = task.get('responsibleId')
        creator_name = task.get('creator').get('name')
        responsible_name = task.get('responsible').get('name')
        deadline = task.get('deadline')
        user_id = user_data["user_id"]

        deadline_str = deadline
        if deadline:
            try:
                deadline_date = datetime.strptime(deadline, "%Y-%m-%dT%H:%M:%S%z")  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                deadline_str = deadline_date.strftime("%Y-%m-%d %H:%M")  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {deadline}")

        if event == "ontaskadd":
            message = (
                f"–ó–∞–¥–∞—á–∞ <b><a href='https://{BITRIX_DOMAIN}/company/personal/user/{user_id}/tasks/task/view/{task_id}/'>‚Ññ{task_id}</a></b> - üÜï–°–æ–∑–¥–∞–Ω–∞üÜï\n"
                f"üìå–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"üìù–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üö®–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üìäC—Ç–∞—Ç—É—Å: {status}\n"
                f"‚è∞–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline_str}\n"
                f"üë§–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {creator_name}\n"
                f"üë§–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {responsible_name}"
            )
        elif event == "ontaskupdate":
            changed_by_id = task.get('changedBy')

            changed_by_name = await get_user_name(
                domain=user_data['domain'],
                access_token=user_data["access_token"],
                user_id=changed_by_id
            )

            message = (
                f"–ó–∞–¥–∞—á–∞ <b><a href='https://{BITRIX_DOMAIN}/company/personal/user/{user_id}/tasks/task/view/{task_id}/'>‚Ññ{task_id}</a></b> - üîÑ–ò–∑–º–µ–Ω–µ–Ω–∞üîÑ\n"
                f"üìå–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"üìù–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üö®–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üìäC—Ç–∞—Ç—É—Å: {status}\n"
                f"‚è∞–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline_str}\n"
                f"üë§–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {creator_name}\n"
                f"üë§–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {responsible_name}\n"
                f"üë§–ö—Ç–æ –∏–∑–º–µ–Ω–∏–ª: {changed_by_name}"
            )
        if responsible_id:
            if not (str(user_data.get('user_id')) == str(responsible_id) or user_data.get('is_admin')):
                return
        await bot.send_message(chat_id, message)
    except httpx.HTTPStatusError as e:
        logging.error(f"API request failed: {e.response.text}")
    except Exception as e:
        logging.error(f"Task processing error: {e}")

async def process_deal_event(event: str, data: dict, user_data: dict, chat_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞"""
    try:
        responsible_id = None
        message = ""
        deal = {}
        domain = user_data['domain']
        user_id = user_data["user_id"]

        if event != "oncrmdealdelete":
            deal_id = data.get('data', {}).get('FIELDS', {}).get('ID')
            if not deal_id:
                return

            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{domain}/rest/crm.deal.get",
                    params={
                        "id": deal_id,
                        "auth": user_data["access_token"]
                    }
                )
                deal = resp.json().get("result", {})
                responsible_id = deal.get('ASSIGNED_BY_ID')

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω
            responsible_name = await get_user_name(
                domain=domain,
                access_token=user_data["access_token"],
                user_id=responsible_id
            ) if responsible_id else "–ù–µ —É–∫–∞–∑–∞–Ω"

            changed_by_id = deal.get('MODIFY_BY_ID') or deal.get('MODIFIED_BY_ID')
            changed_by_name = await get_user_name(
                domain=domain,
                access_token=user_data["access_token"],
                user_id=changed_by_id
            ) if changed_by_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            stage_map = {}

            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{user_data['domain']}/rest/crm.dealcategory.stage.list",
                    params={"auth": user_data["access_token"]}
                )
                stages = resp.json().get('result', [])

                for stage in stages:
                    stage_map[stage['STATUS_ID']] = stage['NAME']

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            deal_url = f"https://{domain}/crm/deal/details/{deal_id}/"
            title = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            address = deal.get('COMMENTS', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            stage = stage_map.get(deal.get('STAGE_ID'), deal.get('STAGE_ID'))

            if event == "oncrmdealadd":
                message = (
                    f"–°–¥–µ–ª–∫–∞ <b><a href='{deal_url}'>‚Ññ{deal_id}</a></b> - üÜï–°–æ–∑–¥–∞–Ω–∞üÜï\n"
                    f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                    f"üìà –°—Ç–∞–¥–∏—è: {stage}\n"
                    f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}"
                )
            elif event == "oncrmdealupdate":
                message = (
                    f"–°–¥–µ–ª–∫–∞ <b><a href='{deal_url}'>‚Ññ{deal_id}</a></b> - üîÑ–ò–∑–º–µ–Ω–µ–Ω–∞üîÑ\n"
                    f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                    f"üìà –°—Ç–∞–¥–∏—è: {stage}\n"
                    f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
                    f"‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: {changed_by_name}"
                )

            # logging.info(f"Deal data: {deal}")  # –õ–æ–≥–∏

        if responsible_id:
            if str(user_data.get('user_id')) == str(responsible_id) or user_data.get('is_admin'):
                await bot.send_message(chat_id, message, parse_mode='HTML')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏: {e}")

async def process_comment_event(event: str, data: dict, user_data: dict, chat_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–∞–º –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞"""
    settings = await get_notification_settings(chat_id)
    if not settings['comments']:
        logging.info("Comments notifications are disabled")
        return
    try:
        comment_data = data.get('data', {}).get('FIELDS_AFTER')
        logging.info(f"Comment data: {comment_data}") # –õ–æ–≥–∏

        if not comment_data:
            logging.warning("No FIELDS_AFTER in webhook data for comment")
            return

        comment_id = comment_data.get('ID')
        task_id = comment_data.get('TASK_ID')
        if not comment_id or not task_id:
            logging.warning(f"Invalid comment webhook payload: {comment_data}")
            return

        message = ""
        responsible_id = None
        user_id = user_data["user_id"]

        try:
            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{user_data['domain']}/rest/task.commentitem.get",
                    params={
                        "taskId": task_id,
                        "itemId": comment_id,
                        "auth": user_data["access_token"]
                    }
                )
                comment = resp.json().get('result', {})
                #logging.info(f"Comment data: {comment}")  # –õ–æ–≥–∏
        except Exception as e:
            logging.error(f"Failed to fetch comment {comment_id} for task {task_id}: {e}")
            return

        author_name = comment.get('AUTHOR_NAME')
        comment_text = comment.get('POST_MESSAGE', '')[:1000]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        comment_date = datetime.strptime(comment['POST_DATE'], "%Y-%m-%dT%H:%M:%S%z").strftime("%Y-%m-%d %H:%M")
        message = (
            f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ <b><a href='https://{BITRIX_DOMAIN}/company/personal/user/{user_id}/tasks/task/view/{task_id}/'>‚Ññ{task_id}</a></b>\n"
            f"–ê–≤—Ç–æ—Ä: {author_name}\n"
            f"–¢–µ–∫—Å—Ç: {comment_text}\n"
            f"–î–∞—Ç–∞: {comment_date}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        async with httpx.AsyncClient() as client:
            resp = await client.get(
                f"https://{user_data['domain']}/rest/tasks.task.get",
                params={
                    "taskId": task_id,
                    "auth": user_data["access_token"]
                }
            )
            task = resp.json().get('result', {}).get('task', {})
            if not task:
                logging.warning(f"Task {task_id} not found when resolving responsible for comment")
                return
            responsible_id = task.get('responsibleId')

        if responsible_id:
            if str(user_data.get('user_id')) == str(responsible_id) or user_data.get('is_admin'):
                await bot.send_message(chat_id, message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")


# --- –ö–æ–º–∞–Ω–¥—ã Telegram Bot --- 
@dp.message(Command("start"))
async def cmd_start(m: Message):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth_url = (
        f"https://{BITRIX_DOMAIN}/oauth/authorize/"
        f"?client_id={BITRIX_CLIENT_ID}"
        f"&response_type=code"
        f"&state={m.from_user.id}"
        f"&redirect_uri={REDIRECT_URI}"
    )

    message_to_user = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã BitrixAssistant –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {auth_url}")
    await m.answer(message_to_user)


@dp.message(F.text == "/cancel")
async def cmd_cancel(m: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await m.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message(Command("task"))
async def cmd_task(m: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    await m.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreationStates.waiting_for_title)


@dp.message(TaskCreationStates.waiting_for_title)
async def process_task_title(m: Message, state: FSMContext):
    if len(m.text) > 255:
        return await m.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    await state.update_data(title=m.text)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(TaskCreationStates.waiting_for_description)


@dp.message(TaskCreationStates.waiting_for_description)
async def process_task_description(m: Message, state: FSMContext):
    description = m.text if m.text.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(description=description)

    await m.answer("–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è):")
    await state.set_state(TaskCreationStates.waiting_for_responsible)


@dp.message(TaskCreationStates.waiting_for_responsible)
async def process_task_responsible(m: Message, state: FSMContext):

    user_data = await get_user(m.from_user.id)
    data = await state.get_data()

    if m.text.lower() == "–Ω–µ—Ç":
        responsible_id = user_data["user_id"]
    else:
        if not m.text.isdigit():
            return await m.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

        responsible_id = int(m.text)
        if not await check_user_exists(user_data["domain"], user_data["access_token"], responsible_id):
            return await m.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    await state.update_data(responsible_id=responsible_id)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-–Ω–∏–∑–∫–∏–π, 2-—Å—Ä–µ–¥–Ω–∏–π, 3-–≤—ã—Å–æ–∫–∏–π –∏–ª–∏ '–Ω–µ—Ç'):")
    await state.set_state(TaskCreationStates.waiting_for_priority)


@dp.message(TaskCreationStates.waiting_for_priority)
async def process_task_priority(m: Message, state: FSMContext):
    priority_map = {"1": 0, "2": 1, "3": 2}
    priority = None

    if m.text.lower() != "–Ω–µ—Ç":
        if m.text not in priority_map:
            return await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1, 2 –∏–ª–∏ 3. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        priority = priority_map[m.text]

    await state.update_data(priority=priority)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ '–Ω–µ—Ç'):")
    await state.set_state(TaskCreationStates.waiting_for_deadline)


@dp.message(TaskCreationStates.waiting_for_deadline)
async def process_task_deadline(m: Message, state: FSMContext):
    user_data = await get_user(m.from_user.id)
    data = await state.get_data()
    deadline = None

    if m.text.lower() != "–Ω–µ—Ç":
        try:
            deadline = datetime.strptime(m.text, "%Y-%m-%d").strftime("%Y-%m-%dT%H:%M:%S")
        except ValueError:
            return await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    # –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    task_data = {
        "TITLE": data["title"],
        "DESCRIPTION": data.get("description", ""),
        "RESPONSIBLE_ID": data["responsible_id"],
        "PRIORITY": data.get("priority", 2),
        "DEADLINE": deadline
    }

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"https://{user_data['domain']}/rest/tasks.task.add.json",
                params={"auth": user_data["access_token"]},
                json={"fields": task_data}
            )
            data = resp.json()

            if data.get('error'):
                error_msg = data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Bitrix')
                raise ValueError(error_msg)

            task_id = data['result']['task']['id']
            await m.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {task_id}")

    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    await state.clear()


@dp.message(Command("deal"))
async def cmd_deal(m: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    user_data = await get_user(m.from_user.id)
    if not user_data or not user_data.get("is_admin"):
        return await m.answer("‚ùó –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    await m.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–ù–∞–∑–≤–∞–Ω–∏–µ –ñ–ö):")
    await state.set_state(DealCreationStates.waiting_for_title)


@dp.message(DealCreationStates.waiting_for_title)
async def process_deal_title(m: Message, state: FSMContext):
    if len(m.text.strip()) == 0:
        return await m.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    if len(m.text) > 255:
        return await m.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    await state.update_data(title=m.text)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(DealCreationStates.waiting_for_address)


@dp.message(DealCreationStates.waiting_for_address)
async def process_deal_address(m: Message, state: FSMContext):
    if len(m.text.strip()) == 0:
        return await m.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    user_data = await get_user(m.from_user.id)
    message = await show_stage_list(m.chat.id, user_data["domain"], user_data["access_token"])

    await state.update_data(address=m.text)
    await m.answer(f"{message}\n–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

    await state.set_state(DealCreationStates.waiting_for_stage_id)


@dp.message(DealCreationStates.waiting_for_stage_id)
async def process_deal_stage(m: Message, state: FSMContext):
    user_data = await get_user(m.from_user.id)
    data = await state.get_data()
    stage_id = None

    if m.text.lower() != "–Ω–µ—Ç":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞–¥–∏–∏
        try:
            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{user_data['domain']}/rest/crm.dealcategory.stage.list",
                    params={"auth": user_data["access_token"]}
                )
                stages = resp.json().get('result', [])
                stage_ids = {stage['STATUS_ID'] for stage in stages}

                if m.text not in stage_ids:
                    return await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç–∞–¥–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ '–Ω–µ—Ç':")

                stage_id = m.text
        except Exception as e:
            return await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–¥–∏–∏: {str(e)}")

    # –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    deal_data = {
        "TITLE": data["title"],
        "COMMENTS": data["address"],
        "ASSIGNED_BY_ID": user_data["user_id"]
    }

    if stage_id:
        deal_data["STAGE_ID"] = stage_id

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"https://{user_data['domain']}/rest/crm.deal.add.json",
                params={"auth": user_data["access_token"]},
                json={"fields": deal_data}
            )
            deal_data = resp.json()

            if deal_data.get('error'):
                error_msg = deal_data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Bitrix')
                raise ValueError(error_msg)

            deal_id = deal_data.get('result')
            await m.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {deal_id}")

    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")

    await state.clear()


@dp.message(Command("comment"))
async def cmd_comment(m: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    await m.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await state.set_state(CommentCreationStates.waiting_for_task_id)


@dp.message(CommentCreationStates.waiting_for_task_id)
async def process_comment_task_id(m: Message, state: FSMContext):
    user_data = await get_user(m.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∑–∞–¥–∞—á–∏
    if not m.text.isdigit():
        return await m.answer("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    task_id = int(m.text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(
                f"https://{user_data['domain']}/rest/tasks.task.get.json",
                params={
                    "taskId": task_id,
                    "auth": user_data["access_token"]
                }
            )
            task_data = resp.json()
            #logging.info(f"Task Data: {task_data}")  # –õ–æ–≥–∏

            if task_data.get('result') == []:
                return await m.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:")

            await state.update_data(task_id=task_id)
            await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")
            await state.set_state(CommentCreationStates.waiting_for_comment_text)

    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ.")
        await state.clear()


@dp.message(CommentCreationStates.waiting_for_comment_text)
async def process_comment_text(m: Message, state: FSMContext):
    user_data = await get_user(m.from_user.id)
    data = await state.get_data()
    task_id = data['task_id']

    if len(m.text.strip()) == 0:
        return await m.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"https://{user_data['domain']}/rest/task.commentitem.add.json",
                params={"auth": user_data["access_token"]},
                json={
                    "TASK_ID": task_id,
                    "fields": {
                        "AUTHOR_ID": user_data["user_id"],
                        "POST_MESSAGE": m.text
                    }
                }
            )
            comment_data = resp.json()

            if 'error' in comment_data:
                error_msg = comment_data.get('error_description', '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
                raise ValueError(error_msg)

            await m.answer(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ {task_id}")

    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")

    await state.clear()


async def show_stage_list(chat_id: int, domain: str, token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π —Å–¥–µ–ª–æ–∫"""
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(
                f"https://{domain}/rest/crm.dealcategory.stage.list",
                params={"auth": token}
            )
            stages = resp.json().get('result', [])

            if not stages:
                await bot.send_message(chat_id, "‚ùó –°—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            message = "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫:\n"
            for stage in stages:
                message += f"{stage['NAME']} (ID: {stage['STATUS_ID']})\n"

            return message

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–π: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–π: {e}")


@dp.message(Command("employees"))
async def cmd_employees(m: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ Bitrix24"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(
                f"https://{user_data['domain']}/rest/user.get.json",
                params={
                    "auth": user_data["access_token"],
                    "FILTER": {"USER_TYPE": "employee"},
                    "SELECT": ["ID", "NAME", "LAST_NAME"]
                }
            )
            data = resp.json()

            if 'error' in data:
                error_msg = data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                return await m.answer(f"‚ùå –û—à–∏–±–∫–∞ Bitrix: {error_msg}")

            users = data.get('result', [])
            if not users:
                return await m.answer("ü§∑ –ù–∞ –ø–æ—Ä—Ç–∞–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            user_list = []
            for user in users:
                user_id = user.get('ID', 'N/A')
                name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                user_list.append(f"üë§ {name} (ID: {user_id})")

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            chunk_size = 20
            for i in range(0, len(user_list), chunk_size):
                chunk = user_list[i:i + chunk_size]
                await m.answer(
                    "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n" + "\n".join(chunk),
                    parse_mode="HTML"
                )

    except Exception as e:
        logging.error(f"Employees error: {str(e)}", exc_info=True)
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")


@dp.message(Command("tasks"))
async def cmd_tasks(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    try:
        user_id = user_data['user_id']

        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"https://{user_data['domain']}/rest/tasks.task.list.json",
                params={"auth": user_data["access_token"]},
                json={
                    "order": {"CREATED_DATE": "DESC"},
                    "select": ["ID", "TITLE", "RESPONSIBLE_ID", "CREATED_BY", "STATUS", "DEADLINE"]
                }
            )
            resp.raise_for_status()
            data = resp.json()

            if 'error' in data:
                error_msg = data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                raise ValueError(f"Bitrix API: {error_msg}")

            tasks = data.get('result', {}).get('tasks', [])
            if not tasks:
                await m.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return

            status_map = {
                '2': "üÜï –ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                '3': "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                '4': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
                '5': "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                '6': "‚è∏ –û—Ç–ª–æ–∂–µ–Ω–∞"
            }

            message = ["üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"]
            for task in tasks:
                task_id = task.get('id')
                title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                task_info = (
                    f"–ó–∞–¥–∞—á–∞ <b><a href='https://{BITRIX_DOMAIN}/company/personal/user/{user_id}/tasks/task/view/{task_id}/'>‚Ññ{task_id}</a></b>",
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}",
                    "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï"
                )
                message.extend(task_info)
            message.append(f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á.")

            await m.answer("\n".join(message))

    except httpx.HTTPStatusError as e:
        logging.error(f"HTTP error: {e.response.text}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24.")
    except ValueError as e:
        await m.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /tasks: {str(e)}", exc_info=True)
        await m.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")


@dp.message(Command("deals"))
async def cmd_deals(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    try:
        domain = user_data['domain']
        user_id = user_data["user_id"]
        is_admin = user_data.get("is_admin", False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
        filter_params = {} if is_admin else {"ASSIGNED_BY_ID": user_id}

        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"https://{domain}/rest/crm.deal.list",
                params={"auth": user_data["access_token"]},
                json={
                    "order": {"DATE_CREATE": "DESC"},
                    "filter": filter_params,
                    "select": ["ID", "TITLE", "STAGE_ID", "ASSIGNED_BY_ID"]
                }
            )
            data = resp.json()

            if 'error' in data:
                error_msg = data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                raise ValueError(f"Bitrix API: {error_msg}")

            deals = data.get('result', [])
            if not deals:
                await m.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
                return

            stage_map = {}

            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    f"https://{user_data['domain']}/rest/crm.dealcategory.stage.list",
                    params={"auth": user_data["access_token"]}
                )
                stages = resp.json().get('result', [])

                for stage in stages:
                    stage_map[stage['STATUS_ID']] = stage['NAME']

            message = ["üè¢ –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫:\n"]
            for deal in deals:
                deal_id = deal.get('ID')
                title = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                stage = stage_map.get(deal.get('STAGE_ID'), deal.get('STAGE_ID'))

                deal_url = f"https://{domain}/crm/deal/details/{deal_id}/"
                message.append(
                    f"üîó <b><a href='{deal_url}'>–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id}</a></b>\n"
                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"üìå –°—Ç–∞–¥–∏—è: {stage}\n"
                    "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï"
                )

            message.append(f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫.")
            await m.answer("\n".join(message), parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /deals: {str(e)}", exc_info=True)
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞.")


@dp.message(Command("settings"))
async def cmd_settings(m: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    await show_settings_menu(m.chat.id)


async def show_settings_menu(chat_id: int):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = await get_notification_settings(chat_id)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"–ù–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ {'üî¥' if not settings['new_deals'] else 'üü¢'}",
                callback_data="toggle_new_deals"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ {'üî¥' if not settings['deal_updates'] else 'üü¢'}",
                callback_data="toggle_deal_updates"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á {'üî¥' if not settings['task_creations'] else 'üü¢'}",
                callback_data="toggle_task_creations"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á {'üî¥' if not settings['task_updates'] else 'üü¢'}",
                callback_data="toggle_task_updates"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ {'üî¥' if not settings['comments'] else 'üü¢'}",
                callback_data="toggle_comments"
            )
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        chat_id,
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith('toggle_'))
async def process_toggle(callback: CallbackQuery):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–∫–ª/–≤—ã–∫–ª) –≤ —Ç–∞–±–ª–∏—Ü–µ notification_settings
        –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        :param callback: –û–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

    pool = await Database.get_pool()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'new_deals'
    action = callback.data.split('_', 1)[1]
    chat_id = callback.message.chat.id

    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_value = await conn.fetchval(
            f"SELECT {action} FROM notification_settings WHERE chat_id = $1",
            chat_id
        )

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (–º–µ–Ω—è–µ–º True –Ω–∞ False –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        new_value = not current_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await conn.execute(
            f"UPDATE notification_settings SET {action} = $1 WHERE chat_id = $2",
            new_value, chat_id
        )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ
    await callback.message.delete()
    await show_settings_menu(chat_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã Telegram —Å–∫—Ä—ã–ª "—á–∞—Å–∏–∫–∏"
    await callback.answer()


@dp.message(Command("task_history"))
async def cmd_task_history(m: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
    await m.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ID –∑–∞–¥–∞—á–∏, –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:")
    await state.set_state(TaskHistoryStates.waiting_for_task_id)

@dp.message(TaskHistoryStates.waiting_for_task_id)
async def process_task_history_id(m: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏ –∏ –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    await state.clear()  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    user_data = await get_user(m.from_user.id)
    if not user_data:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not m.text.isdigit():
        return await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")

    task_id = m.text
    domain = user_data["domain"]
    token = user_data["access_token"]
    user_id = user_data["user_id"]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"https://{domain}/rest/tasks.task.history.list.json",
            params={"auth": token},
            json={"taskId": int(task_id)}
        )
        data = resp.json()

    if data.get("error"):
        return await m.answer(f"‚ùå –û—à–∏–±–∫–∞ Bitrix24: {data.get('error_description')}")

    try:
        history = data.get("result", []).get('list')
    except AttributeError:
        return await m.answer("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")

    #logging.info(f"History data: {history}")  # –õ–æ–≥–∏

    if not history:
        return await m.answer(f"‚ÑπÔ∏è –î–ª—è –∑–∞–¥–∞—á–∏ ‚Ññ{task_id} –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    status_map = {
        '2': "üÜï –ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        '3': "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
        '4': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
        '5': "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        '6': "‚è∏ –û—Ç–ª–æ–∂–µ–Ω–∞"
    }
    
    priority_map = {
        '0': "–ù–∏–∑–∫–∏–π",
        '1': "–°—Ä–µ–¥–Ω–∏–π",
        '2': "–í—ã—Å–æ–∫–∏–π"
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    messages = [f"üóÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ <b><a href='https://{BITRIX_DOMAIN}/company/personal/user/{user_id}/tasks/task/view/{task_id}/'>‚Ññ{task_id}</a></b>:"]
    for entry in history:
        date = entry.get("createdDate", "‚Äì")
        try:
            date_date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%S%z")
            date = date_date.strftime("%Y-%m-%d %H:%M")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {date}")
        field = entry.get("field", "‚Äì")
        old = entry.get("value").get("from", "")
        new = entry.get("value").get("to", "")
        author = f"{entry.get('user').get('name')} {entry.get('user').get('lastName')}"

        text = "-"
        match field:
            case "NEW":
                text = "–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞\n"
            case "TITLE":
                text = (f"–ò–∑–º–µ–Ω–µ–Ω–æ –ù–∞–∑–≤–∞–Ω–∏–µ\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {old} ‚Üí {new}\n")
            case "DESCRIPTION":
                text = "–ò–∑–º–µ–Ω–µ–Ω–æ –û–ø–∏—Å–∞–Ω–∏–µ\n"
            case "STATUS":
                text = (f"–ò–∑–º–µ–Ω–µ–Ω –°—Ç–∞—Ç—É—Å\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {status_map[old]} ‚Üí {status_map[new]}\n")
            case "PRIORITY":
                text = (f"–ò–∑–º–µ–Ω–µ–Ω –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {priority_map[old]} ‚Üí {priority_map[new]}\n")
            case "DEADLINE":
                text = "–ò–∑–º–µ–Ω–µ–Ω –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫\n"
            case "COMMENT":
                text = f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Ññ{new}\n"
            case "RESPONSIBLE_ID":
                old_resp_name = await get_user_name(domain, token, int(old))
                new_resp_name = await get_user_name(domain, token, int(new))
                text = (f"–°–º–µ–Ω–µ–Ω –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {old_resp_name} ‚Üí {new_resp_name}\n")
        
        text += f"–ê–≤—Ç–æ—Ä: {author}"
        messages.append(f"\n<b>{date}</b> - {text}")

    # –í –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ 10 –∑–∞–ø–∏—Å–µ–π
    chunk_size = 10
    for i in range(0, len(messages), chunk_size):
        await m.answer("\n".join(messages[i:i+chunk_size]), parse_mode="HTML")


def edit_fields_keyboard(changed: dict = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    changed = changed or {}

    def mark(label, field):
        return f"‚úÖ {label}" if changed.get(field) else label

    keyboard = [
        [InlineKeyboardButton(text=mark("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", "title"), callback_data="edit_field_title")],
        [InlineKeyboardButton(text=mark("üìù –û–ø–∏—Å–∞–Ω–∏–µ", "description"), callback_data="edit_field_description")],
        [InlineKeyboardButton(text=mark("üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "priority"), callback_data="edit_field_priority")],
        [InlineKeyboardButton(text=mark("üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "responsible_id"), callback_data="edit_field_responsible_id")],
        [InlineKeyboardButton(text=mark("üìà –°—Ç–∞—Ç—É—Å", "status"), callback_data="edit_field_status")],
        [InlineKeyboardButton(text=mark("‚è∞ –°—Ä–æ–∫", "deadline"), callback_data="edit_field_deadline")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="edit_save")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("edit_task"))
async def cmd_edit_task(m: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
    await m.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(TaskEditStates.waiting_for_task_id)

@dp.message(TaskEditStates.waiting_for_task_id)
async def process_edit_task_id(m: Message, state: FSMContext):
    if not m.text.isdigit():
        return await m.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

    task_id = int(m.text)
    user = await get_user(m.from_user.id)
    if not user:
        return await m.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞:
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            f"https://{user['domain']}/rest/tasks.task.get",
            params={"taskId": task_id, "auth": user["access_token"]}
        )
    data = resp.json().get("result", {})
    task = data.get("task") or {}
    if not task:
        return await m.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    is_admin   = user["is_admin"]
    is_creator = str(task.get("creatorId")) == str(user["user_id"])
    if not (is_admin or is_creator):
        return await m.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.")

    # –∑–∞–ø–æ–º–Ω–∏–º task_id –∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await state.update_data(task_id=task_id, changes={})
    kb = edit_fields_keyboard(changed={})
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(TaskEditStates.choosing_field)

@dp.callback_query(TaskEditStates.choosing_field, F.data.startswith("edit_field_"))
async def callback_choose_field(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    field = callback.data.replace("edit_field_", "")

    names = {
        "title": "–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "priority": "–Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 ‚Äî –Ω–∏–∑–∫–∏–π, 1 ‚Äî —Å—Ä–µ–¥–Ω–∏–π, 2 ‚Äî –≤—ã—Å–æ–∫–∏–π)",
        "deadline": "–Ω–æ–≤—ã–π —Å—Ä–æ–∫ (–ì–ì–ì–ì-–ú–ú-–î–î)",
        "responsible_id": "ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        "status": "—Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (2 ‚Äî –ù–æ–≤–∞—è, 3 ‚Äî –í —Ä–∞–±–æ—Ç–µ, 4 ‚Äî –û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è, 5 ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω–∞, 6 ‚Äî –û—Ç–ª–æ–∂–µ–Ω–∞)"
    }

    if field not in names:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    await state.update_data(current_field=field)
    await state.set_state(TaskEditStates.editing_field)

    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ {names[field]} (–∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )


@dp.message(TaskEditStates.editing_field)
async def process_editing_field(m: Message, state: FSMContext):
    data = await state.get_data()
    field = data["current_field"]
    val = m.text.strip()
    user = await get_user(m.from_user.id)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    if val.lower() != "–Ω–µ—Ç":
        if field == "deadline":
            try:
                datetime.strptime(val, "%Y-%m-%d")
                val = val + "T00:00:00"
            except:
                return await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î")

        elif field == "priority":
            if val not in ("0", "1", "2"):
                return await m.answer("‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, 1 –∏–ª–∏ 2. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

        elif field == "status":
            if val not in ("2", "3", "4", "5", "6"):
                return await m.answer("‚ùå –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 6. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

        elif field == "responsible_id":
            if not val.isdigit():
                return await m.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            exists = await check_user_exists(user["domain"], user["access_token"], int(val))
            if not exists:
                return await m.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

    changes = data.get("changes", {})
    if val.lower() != "–Ω–µ—Ç":
        changes[field.upper()] = int(val) if val.isdigit() else val
    await state.update_data(changes=changes)

    kb = edit_fields_keyboard(changed=changes)
    await m.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª", reply_markup=kb)
    await state.set_state(TaskEditStates.choosing_field)

@dp.callback_query(F.data == "edit_save", TaskEditStates.choosing_field)
async def callback_save(c: CallbackQuery, state: FSMContext):
    data    = await state.get_data()
    task_id = data["task_id"]
    changes = data["changes"]
    user    = await get_user(c.from_user.id)

    if not changes:
        await c.answer("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", show_alert=True)
        return

    params = {"auth": user["access_token"]}
    body   = {"taskId": task_id, "fields": changes}

    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"https://{user['domain']}/rest/tasks.task.update",
            params=params,
            json=body
        )
    result = resp.json()
    if result.get("error"):
        text = result.get("error_description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await c.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {text}")
    else:
        await c.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    await state.clear()
    await c.answer()

@dp.callback_query(F.data == "edit_cancel", TaskEditStates.choosing_field)
async def callback_cancel(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await c.answer()


@dp.message(Command("help"))
async def cmd_help(m: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞"""
    help_text = ("""
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Bitrix24
/tasks - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
/edit_task - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
/comment - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ
/deal - –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É (‚ùó–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤‚ùó)
/deals - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
/employees - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
/task_history - –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

/help - –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
    """)

    await m.answer(help_text)
